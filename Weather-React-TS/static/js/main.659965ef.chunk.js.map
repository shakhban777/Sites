{"version":3,"sources":["api/api.ts","components/title/title.tsx","components/selectors/select-city/select-city.tsx","assets/img/placeholder.svg","components/placeholder/placeholder.tsx","assets/img/icons/arrow-left.svg","components/forecast/left-arrow/left-arrow.tsx","assets/img/icons/arrow-right.svg","components/forecast/right-arrow/right-arrow.tsx","components/weather-cards/weather-card.tsx","components/forecast/weather/weather.tsx","components/selectors/select-date/select-date.tsx","components/forecast/forecast.tsx","components/app/app.tsx","reportWebVitals.ts","index.tsx"],"names":["WeatherApiService","_apiKey","_baseURL","symbolOfWeather","temperature","fetchFromServer","urlToFetch","a","fetch","dataFromServer","ok","Error","status","json","getWeatherForSevenDays","lat","lon","weatherForSevenDaysUrl","weatherDataForSevenDaysJson","weatherForSevenDaysArrays","daily","map","day","temp","id","dt","icon","weather","find","el","date","Date","toLocaleString","year","month","split","join","Math","round","toString","getWeatherForHistoricDate","weatherForHistoricDateUrlToFetch","weatherForHistoricDateJson","weatherOfHistoricDay","current","console","error","Title","className","SelectCity","cities","onChangeLocation","blockSelect","useState","isActive","setIsActive","styleClass","onFocus","onBlur","onChange","event","target","value","blur","hidden","city","name","Placeholder","src","placeholder","alt","LeftArrowBlock","scrollToThePrevForecast","onClick","arrowLeft","RightArrowBlock","scrollToTheNextForecast","arrowRight","WeeklyCard","HistoricCard","image","text","WeatherCard","Weather","sevenDaysWeatherData","showAllWeatherCardsForSevenDays","onPreviousDay","onNextDay","leftArrow","rightArrow","obj","SelectDate","onChangeDate","isFocused","setIsFocused","minDays","now","oneDay","toISOString","slice","maxDays","opacityStyle","type","style","opacity","min","max","parse","onInput","WeeklyForecast","showSevenDaysForecast","title","HistoricForecast","showHistoricForecast","historicWeatherData","weatherOrPlaceholder","Forecast","App","windowWidth","React","window","innerWidth","width","setWidth","useEffect","addEventListener","updateWidth","removeEventListener","useWindowDimensions","location","setLocation","setDate","setSevenDaysWeatherData","setHistoricWeatherData","setShowSevenDaysForecast","setShowHistoricForecast","setShowAllWeatherCardsForSevenDays","weatherDays","setWeatherDays","locationForSevenDaysWeather","locationForHistoricWeather","then","response","historicForecast","changeLocationHandler","coords","newLocation","prevState","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.659965ef.chunk.js","sourcesContent":["type WeatherApiType = {\r\n   id: number,\r\n   icon: string,\r\n   date: string,\r\n   temperature: string\r\n}\r\n\r\ntype WeatherType = {\r\n   weather: [{ icon: string }];\r\n   dt: number;\r\n   temp: {\r\n      day: number;\r\n   };\r\n}\r\n\r\nexport default class WeatherApiService {\r\n   _apiKey: string = '9f794cbee16169a67f1379107a9a4b6e';\r\n   _baseURL: string = 'https://api.openweathermap.org/data/2.5/onecall';\r\n\r\n   symbolOfWeather = (temperature: number) => {\r\n      if (temperature - 273.15 > 0) {\r\n         return '+';\r\n      } else if (temperature - 273.15 < 0) {\r\n         return '-';\r\n      } else {\r\n         return '';\r\n      }\r\n   }\r\n\r\n   fetchFromServer = async (urlToFetch: string) => {\r\n      const dataFromServer = await fetch(urlToFetch);\r\n\r\n      if (!dataFromServer.ok) {\r\n         throw new Error(`Could not fetch ${dataFromServer}, received ${dataFromServer.status}`);\r\n      }\r\n\r\n      return await dataFromServer.json();\r\n   }\r\n\r\n   getWeatherForSevenDays = async (lat: number, lon: number): Promise<WeatherApiType[]> => {\r\n      const weatherForSevenDaysUrl: string = `${this._baseURL}?lat=${lat}&lon=${lon}&&exclude=current,minutely,hourly,alerts&appid=${\r\n         this._apiKey\r\n      }`;\r\n\r\n      const weatherDataForSevenDaysJson = await this.fetchFromServer(weatherForSevenDaysUrl);\r\n      const weatherForSevenDaysArrays = weatherDataForSevenDaysJson.daily;\r\n\r\n      return weatherForSevenDaysArrays.map((day: WeatherType) => {\r\n         const symbolOfWeather: string = this.symbolOfWeather(day.temp.day);\r\n         return {\r\n            id: day.dt,\r\n            icon: `https://openweathermap.org/img/wn/${day.weather.find(el => el.icon)?.icon}@2x.png`,\r\n            date: new Date(day.dt * 1000)\r\n               .toLocaleString(\"en\", {year: 'numeric', month: 'short', day: \"numeric\"})\r\n               .split(', ')\r\n               .join(' '),\r\n            temperature: symbolOfWeather + Math.round(day.temp.day - 273.15).toString() + '°'\r\n         };\r\n      });\r\n   }\r\n\r\n   getWeatherForHistoricDate = async (lat: number, lon: number, date: number) => {\r\n      const weatherForHistoricDateUrlToFetch: string = `${this._baseURL}/timemachine?lat=${lat}&lon=${lon}&dt=${date}&appid=${this._apiKey}`;\r\n      try {\r\n         const weatherForHistoricDateJson = await this.fetchFromServer(weatherForHistoricDateUrlToFetch);\r\n         const weatherOfHistoricDay = weatherForHistoricDateJson.current;\r\n         const symbolOfWeather: string = this.symbolOfWeather(weatherOfHistoricDay.temp);\r\n\r\n         return {\r\n            icon: `https://openweathermap.org/img/wn/${weatherOfHistoricDay.weather[0].icon}@2x.png`,\r\n            date: new Date(weatherOfHistoricDay.dt * 1000).toLocaleString(\"en\",\r\n               {year: 'numeric', month: 'short', day: \"numeric\"}).split(', ').join(' '),\r\n            temperature: `${symbolOfWeather}${Math.round(weatherOfHistoricDay.temp - 273.15).toString()}°`\r\n         };\r\n      } catch (error) {\r\n         console.error(error);\r\n         return {\r\n            icon: '',\r\n            date: '',\r\n            temperature: ''\r\n         }\r\n      }\r\n   }\r\n}","import React from 'react';\r\nimport './title.scss';\r\n\r\nconst Title: React.FC = () => {\r\n   return (\r\n      <div className='title'>\r\n         <div className='title__item title__item-1'>Weather</div>\r\n         <div className='title__item title__item-2'>forecast</div>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default Title;","import React, {useState} from 'react';\r\nimport {CityType} from \"../../app/app\";\r\nimport './select-city.scss';\r\n\r\nexport type SelectCitiesTypeProps = {\r\n   cities: CityType[],\r\n   onChangeLocation: (coords: string, blockSelect: number) => void,\r\n   blockSelect: number\r\n}\r\n\r\nconst SelectCity: React.FC<SelectCitiesTypeProps> = ({cities, onChangeLocation, blockSelect}) => {\r\n   const [isActive, setIsActive] = useState<boolean>(false);\r\n\r\n   const changeLocationHandler = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n      onChangeLocation(event.target.value, blockSelect);\r\n      event.target.blur();\r\n   };\r\n\r\n   let styleClass: string = 'select-city__wrapper';\r\n   if (isActive) {\r\n      styleClass += ' active';\r\n   } else {\r\n      styleClass = 'select-city__wrapper';\r\n   }\r\n\r\n\r\n   return (\r\n      <div className={styleClass}>\r\n         <select className='select select-city'\r\n                 onFocus={(): void => setIsActive(true)}\r\n                 onBlur={(): void => setIsActive(false)}\r\n                 onChange={changeLocationHandler}>\r\n            <option hidden>Select city</option>\r\n            {cities.map(city => <option key={city.lat}\r\n                                        value={`${city.lat}, ${city.lon}`}>{city.name}</option>\r\n            )}\r\n         </select>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default SelectCity;\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/placeholder.59a85e9a.svg\";","import React from 'react';\r\nimport placeholder from '../../assets/img/placeholder.svg';\r\nimport './placeholder.scss';\r\n\r\nconst Placeholder: React.FC = () => {\r\n   return (\r\n      <div className='placeholder'>\r\n         <img className='placeholder__image' src={placeholder} alt=\"cloud\"/>\r\n         <p className='placeholder__text'>Fill in all the fields and the weather will be displayed</p>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default Placeholder;","export default __webpack_public_path__ + \"static/media/arrow-left.c57d52d4.svg\";","import React from \"react\";\r\nimport arrowLeft from \"../../../assets/img/icons/arrow-left.svg\";\r\nimport '../forecast.scss';\r\n\r\ntype LeftArrowTypeProps = {\r\n  scrollToThePrevForecast?: () => void,\r\n}\r\n\r\nconst LeftArrowBlock: React.FC<LeftArrowTypeProps> = ({\r\n                                                        scrollToThePrevForecast\r\n                                                      }) => {\r\n   return (\r\n      <div onClick={scrollToThePrevForecast}\r\n           className=\"weather-blocks__arrow-left\">\r\n         <img src={arrowLeft} alt=\"arrow-left\"/>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default LeftArrowBlock;","export default __webpack_public_path__ + \"static/media/arrow-right.e6596943.svg\";","import React from \"react\";\r\nimport arrowRight from \"../../../assets/img/icons/arrow-right.svg\";\r\nimport '../forecast.scss';\r\n\r\ntype RightArrowTypeProps = {\r\n  scrollToTheNextForecast?: () => void,\r\n}\r\n\r\nconst RightArrowBlock: React.FC<RightArrowTypeProps> = ({\r\n                                                          scrollToTheNextForecast\r\n                                                      }) => {\r\n   return (\r\n      <div onClick={scrollToTheNextForecast}\r\n           className=\"weather-blocks__arrow-right\">\r\n         <img src={arrowRight} alt=\"arrow-right\"/>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default RightArrowBlock;","import React from \"react\";\r\nimport './seven-days-weather-card.scss';\r\nimport './historic-weather-card.scss';\r\n\r\ntype WeatherTypeProps = {\r\n  date: string,\r\n  icon: string,\r\n  temperature: string,\r\n}\r\n\r\ntype WhichCardRenderTypeProp = {\r\n  blockSelect: number\r\n}\r\n\r\nconst WeatherCard: React.FC<WeatherTypeProps & WhichCardRenderTypeProp> = ({date, icon, temperature, blockSelect}) => {\r\n  if (blockSelect === 0) {\r\n    return <WeeklyCard date={date} icon={icon} temperature={temperature}/>\r\n  } else {\r\n    return <HistoricCard date={date} icon={icon} temperature={temperature}/>\r\n  }\r\n};\r\n\r\nconst WeeklyCard: React.FC<WeatherTypeProps> = ({date, icon, temperature}) => {\r\n  return (\r\n    <div className='weather-card'>\r\n      <div className=\"weather-card__flex\">\r\n        <div className=\"weather-card__date\">{date}</div>\r\n        <img className='weather-card__image' src={icon} alt=\"\"/>\r\n        <div className=\"weather-card__temp\">{temperature}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst HistoricCard: React.FC<WeatherTypeProps> = ({date, icon, temperature}) => {\r\n  const image = icon ? <img className='historic-weather-card__image' src={icon} alt=\"\"/> : null;\r\n  const text = date\r\n    ? <div className=\"historic-weather-card__date\">{date}</div>\r\n    : <div className=\"error-text\">Please enter last 5 days or choose from calendar</div>\r\n\r\n  return (\r\n    <div className='historic-weather-card'>\r\n      <div className=\"historic-weather-card__flex\">\r\n        {text}\r\n        {image}\r\n        <div className=\"historic-weather-card__temp\">{temperature}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherCard;","import React from \"react\";\r\nimport {WeatherInfoType} from \"../../app/app\";\r\nimport LeftArrowBlock from \"../left-arrow/left-arrow\";\r\nimport RightArrowBlock from \"../right-arrow/right-arrow\";\r\nimport WeatherCard from \"../../weather-cards/weather-card\";\r\nimport '../forecast.scss';\r\n\r\ntype WeatherType = {\r\n   sevenDaysWeatherData?: WeatherInfoType[],\r\n   showAllWeatherCardsForSevenDays?: boolean,\r\n   onPreviousDay?: () => void,\r\n   onNextDay?: () => void,\r\n   blockSelect: number\r\n}\r\n\r\nconst Weather: React.FC<WeatherType> = ({\r\n                                           sevenDaysWeatherData,\r\n                                           showAllWeatherCardsForSevenDays,\r\n                                           onPreviousDay,\r\n                                           onNextDay,\r\n                                           blockSelect\r\n                                        }) => {\r\n\r\n   const leftArrow = showAllWeatherCardsForSevenDays ? null : <LeftArrowBlock scrollToThePrevForecast={onPreviousDay}/>;\r\n   const rightArrow = showAllWeatherCardsForSevenDays ? null : <RightArrowBlock scrollToTheNextForecast={onNextDay}/>;\r\n\r\n   return (\r\n      <div className='weather-blocks'>\r\n         {leftArrow}\r\n         {\r\n            sevenDaysWeatherData!.map((obj: WeatherInfoType) => {\r\n               return <WeatherCard key={obj.id}\r\n                                   date={obj.date}\r\n                                   icon={obj.icon}\r\n                                   temperature={obj.temperature}\r\n                                   blockSelect={blockSelect}/>\r\n            })\r\n         }\r\n         {rightArrow}\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default Weather;","import React, {useState} from 'react';\r\nimport './select-date.scss';\r\n\r\ntype SelectDatePropsType = {\r\n  onChangeDate?: (date: number) => void\r\n}\r\n\r\nconst SelectDate: React.FC<SelectDatePropsType> = ({onChangeDate}) => {\r\n  const [isFocused, setIsFocused] = useState<boolean>(false);\r\n\r\n  const oneDay = 86400000;\r\n  const minDays = new Date(Date.now() - oneDay * 5).toISOString().slice(0, 10);\r\n  const maxDays = new Date().toISOString().slice(0, 10);\r\n\r\n  const dateChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const date = Date.parse(event.target.value) / 1000;\r\n    if (onChangeDate) {\r\n      onChangeDate(date);\r\n    }\r\n  };\r\n\r\n  const opacityStyle = isFocused ? 0 : 1;\r\n\r\n  return (\r\n    <div className='select-date__wrapper'>\r\n      <input type=\"text\"\r\n             className='select select-date__placeholder'\r\n             placeholder=\"Select date\"\r\n             style={{opacity: opacityStyle}}/>\r\n      <input className='select select-date'\r\n             type=\"date\"\r\n             min={minDays}\r\n             max={maxDays}\r\n             onChange={dateChangeHandler}\r\n             onFocus={() => setIsFocused(true)}\r\n             onBlur={() => setIsFocused(false)}\r\n             onInput={() => setIsFocused(true)}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectDate;","import React from 'react';\r\nimport {CityType, WeatherInfoType} from \"../app/app\";\r\nimport SelectCity from '../selectors/select-city/select-city';\r\nimport Placeholder from '../placeholder/placeholder';\r\nimport Weather from './weather/weather';\r\nimport WeatherCard from \"../weather-cards/weather-card\";\r\nimport SelectDate from \"../selectors/select-date/select-date\";\r\nimport './forecast.scss';\r\n\r\ntype ForecastTypeProps = {\r\n  cities: CityType[],\r\n  onChangeLocation: (coords: string, blockSelect: number) => void,\r\n  title: string\r\n  blockSelect: number\r\n  sevenDaysWeatherData?: WeatherInfoType[],\r\n  onPreviousDay?: () => void,\r\n  onNextDay?: () => void,\r\n  showAllWeatherCardsForSevenDays?: boolean,\r\n  showHistoricForecast?: boolean,\r\n  showSevenDaysForecast?: boolean,\r\n  onChangeDate?: (date: number) => void,\r\n  historicWeatherData?: WeatherInfoType,\r\n}\r\n\r\nconst Forecast: React.FC<ForecastTypeProps> = ({\r\n                                                 sevenDaysWeatherData,\r\n                                                 showSevenDaysForecast,\r\n                                                 cities,\r\n                                                 onChangeLocation,\r\n                                                 onPreviousDay,\r\n                                                 onNextDay,\r\n                                                 showAllWeatherCardsForSevenDays,\r\n                                                 title,\r\n                                                 blockSelect,\r\n                                                 showHistoricForecast,\r\n                                                 historicWeatherData,\r\n                                                 onChangeDate\r\n                                               }) => {\r\n\r\n  if (blockSelect === 0) {\r\n    return <WeeklyForecast sevenDaysWeatherData={sevenDaysWeatherData}\r\n                           showSevenDaysForecast={showSevenDaysForecast}\r\n                           cities={cities}\r\n                           onChangeLocation={onChangeLocation}\r\n                           onPreviousDay={onPreviousDay}\r\n                           onNextDay={onNextDay}\r\n                           showAllWeatherCardsForSevenDays={showAllWeatherCardsForSevenDays}\r\n                           title={title}\r\n                           blockSelect={blockSelect}/>\r\n  } else {\r\n    return <HistoricForecast title={title}\r\n                             cities={cities}\r\n                             onChangeLocation={onChangeLocation}\r\n                             blockSelect={blockSelect}\r\n                             showHistoricForecast={showHistoricForecast}\r\n                             historicWeatherData={historicWeatherData}\r\n                             onChangeDate={onChangeDate}/>\r\n  }\r\n};\r\n\r\nconst WeeklyForecast: React.FC<ForecastTypeProps> = ({\r\n                                                       sevenDaysWeatherData,\r\n                                                       showSevenDaysForecast,\r\n                                                       cities,\r\n                                                       onChangeLocation,\r\n                                                       onPreviousDay,\r\n                                                       onNextDay,\r\n                                                       showAllWeatherCardsForSevenDays,\r\n                                                       title,\r\n                                                       blockSelect,\r\n                                                     }) => {\r\n  const weather = showSevenDaysForecast\r\n    ? <Weather sevenDaysWeatherData={sevenDaysWeatherData}\r\n               onNextDay={onNextDay}\r\n               onPreviousDay={onPreviousDay}\r\n               showAllWeatherCardsForSevenDays={showAllWeatherCardsForSevenDays}\r\n               blockSelect={blockSelect}/>\r\n    : <Placeholder/>;\r\n\r\n  return (\r\n    <section className='card'>\r\n      <div className='card__content'>\r\n        <div className='card__content-header'>\r\n          <h2 className='card__content-title'>{title}</h2>\r\n          <SelectCity onChangeLocation={onChangeLocation}\r\n                      cities={cities}\r\n                      blockSelect={blockSelect}/>\r\n        </div>\r\n        <div>\r\n          {weather}\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst HistoricForecast: React.FC<ForecastTypeProps> = ({\r\n                                                         cities,\r\n                                                         onChangeLocation,\r\n                                                         blockSelect,\r\n                                                         showHistoricForecast,\r\n                                                         historicWeatherData,\r\n                                                         onChangeDate,\r\n                                                         title\r\n                                                       }) => {\r\n  const weatherOrPlaceholder = showHistoricForecast\r\n    ? <WeatherCard date={historicWeatherData!.date}\r\n                   icon={historicWeatherData!.icon}\r\n                   temperature={historicWeatherData!.temperature}\r\n                   blockSelect={blockSelect}/>\r\n    : <Placeholder/>;\r\n\r\n  return (\r\n    <section className='card'>\r\n      <div className='card__content'>\r\n        <div className='card__content-header'>\r\n          <h2 className='card__content-title'>{title}</h2>\r\n          <div className=\"card__select\">\r\n            <SelectCity cities={cities}\r\n                        onChangeLocation={onChangeLocation}\r\n                        blockSelect={blockSelect}/>\r\n            <SelectDate onChangeDate={onChangeDate}/>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          {weatherOrPlaceholder}\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Forecast;","import React, {useEffect, useState} from 'react';\r\nimport WeatherApiService from \"../../api/api\";\r\nimport Title from '../title/title';\r\nimport Forecast from \"../forecast/forecast\";\r\nimport './app.scss';\r\n\r\nexport type CityType = {\r\n   name: string,\r\n   lat: number,\r\n   lon: number\r\n}\r\n\r\nexport type WeatherInfoType = {\r\n   id?: number,\r\n   date: string,\r\n   icon: string,\r\n   temperature: string\r\n}\r\n\r\ntype LocationType = {\r\n   lat: number | null,\r\n   lon: number | null,\r\n}\r\n\r\nfunction useWindowDimensions() {\r\n   const [width, setWidth] = React.useState<number>(window.innerWidth);\r\n   useEffect(() => {\r\n      window.addEventListener(\"resize\", updateWidth);\r\n      return () => window.removeEventListener(\"resize\", updateWidth);\r\n   });\r\n\r\n   const updateWidth = () => {\r\n      setWidth(window.innerWidth);\r\n   };\r\n   return width;\r\n}\r\n\r\nconst App: React.FC = () => {\r\n   const windowWidth = useWindowDimensions();\r\n   const citiesArray = [\r\n      {name: 'Самара', lat: 53.195873, lon: 50.100193},\r\n      {name: 'Тольятти', lat: 53.507836, lon: 49.420393},\r\n      {name: 'Саратов', lat: 51.533557, lon: 46.034257},\r\n      {name: 'Казань', lat: 55.796127, lon: 49.106405},\r\n      {name: 'Краснодар', lat: 45.035470, lon: 38.975313}\r\n   ];\r\n\r\n   const [cities] = useState<CityType[]>(citiesArray);\r\n   const [location, setLocation] = useState<LocationType[]>([{lat: null, lon: null}, {lat: null, lon: null}]);\r\n   const [date, setDate] = useState<number | null>(null);\r\n   const [sevenDaysWeatherData, setSevenDaysWeatherData] = useState<WeatherInfoType[]>([]);\r\n   const [historicWeatherData, setHistoricWeatherData] = useState<WeatherInfoType>({date: '', icon: '', temperature: ''});\r\n   const [showSevenDaysForecast, setShowSevenDaysForecast] = useState<boolean>(false);\r\n   const [showHistoricForecast, setShowHistoricForecast] = useState<boolean>(false);\r\n   const [showAllWeatherCardsForSevenDays, setShowAllWeatherCardsForSevenDays] = useState<boolean>(false);\r\n   const [weatherDays, setWeatherDays] = useState<number>(0);\r\n\r\n   const [locationForSevenDaysWeather, locationForHistoricWeather] = location;\r\n\r\n   useEffect(() => {\r\n      const lat = locationForSevenDaysWeather.lat;\r\n      const lon = locationForSevenDaysWeather.lon;\r\n\r\n      if (lat && lon) {\r\n         const weatherService = new WeatherApiService();\r\n\r\n         weatherService.getWeatherForSevenDays(lat, lon)\r\n            .then(response => {\r\n               setSevenDaysWeatherData([]);\r\n               if (showAllWeatherCardsForSevenDays) {\r\n                  setSevenDaysWeatherData(response);\r\n               } else {\r\n                  setSevenDaysWeatherData(response.slice(weatherDays, 3 + weatherDays));\r\n               }\r\n               setShowSevenDaysForecast(true);\r\n            })\r\n      }\r\n   }, [locationForSevenDaysWeather, weatherDays, showAllWeatherCardsForSevenDays])\r\n\r\n   useEffect(() => {\r\n      const lat = locationForHistoricWeather.lat;\r\n      const lon = locationForHistoricWeather.lon;\r\n\r\n      if (lat && lon && date) {\r\n         const weatherService = new WeatherApiService();\r\n         weatherService.getWeatherForHistoricDate(lat, lon, date)\r\n            .then(historicForecast => {\r\n               setHistoricWeatherData(historicForecast);\r\n               setShowHistoricForecast(true);\r\n            })\r\n      }\r\n   }, [locationForHistoricWeather, date])\r\n\r\n   useEffect(() => {\r\n      if (windowWidth <= 660) {\r\n         setShowAllWeatherCardsForSevenDays(true);\r\n      } else {\r\n         setShowAllWeatherCardsForSevenDays(false);\r\n      }\r\n   }, [windowWidth])\r\n\r\n   const changeLocationHandler = (coords: string, blockSelect: number) => {\r\n      const [latitude, longitude] = coords.split(', ');\r\n      const newLocation = {\r\n         lat: +latitude,\r\n         lon: +longitude\r\n      };\r\n\r\n      setLocation(prevState => prevState.map(el => {\r\n         if (el === prevState[blockSelect]) {\r\n            return newLocation\r\n         }\r\n         return el;\r\n      }));\r\n   };\r\n\r\n   const nextDayHandler = () => {\r\n      if (0 <= weatherDays && weatherDays < 5) {\r\n         setWeatherDays(prevState => ++prevState);\r\n      }\r\n   };\r\n\r\n   const previousDayHandler = () => {\r\n      if (0 < weatherDays && weatherDays <= 5) {\r\n         setWeatherDays(prevState => --prevState);\r\n      }\r\n   };\r\n\r\n   return (\r\n      <div className='app'>\r\n         <div className='_container'>\r\n            <header className='app__title'>\r\n               <Title/>\r\n            </header>\r\n            <main className='app__blocks'>\r\n               <Forecast cities={cities}\r\n                         title={'7 Days Forecast'}\r\n                         showSevenDaysForecast={showSevenDaysForecast}\r\n                         onChangeLocation={changeLocationHandler}\r\n                         onPreviousDay={previousDayHandler}\r\n                         onNextDay={nextDayHandler}\r\n                         showAllWeatherCardsForSevenDays={showAllWeatherCardsForSevenDays}\r\n                         sevenDaysWeatherData={sevenDaysWeatherData}\r\n                         blockSelect={0}/>\r\n\r\n               <Forecast cities={cities}\r\n                         title={'Forecast for a Date in the Past'}\r\n                         showHistoricForecast={showHistoricForecast}\r\n                         onChangeLocation={changeLocationHandler}\r\n                         onChangeDate={(date: number) => setDate(date)}\r\n                         historicWeatherData={historicWeatherData}\r\n                         blockSelect={1}/>\r\n            </main>\r\n         </div>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default App;","import {ReportHandler} from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n   if (onPerfEntry && onPerfEntry instanceof Function) {\r\n      import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\r\n         getCLS(onPerfEntry);\r\n         getFID(onPerfEntry);\r\n         getFCP(onPerfEntry);\r\n         getLCP(onPerfEntry);\r\n         getTTFB(onPerfEntry);\r\n      });\r\n   }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/app/app';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n   <React.StrictMode>\r\n      <App/>\r\n   </React.StrictMode>,\r\n   document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}