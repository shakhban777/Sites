{"version":3,"sources":["api/api.ts","components/title/title.tsx","components/selectors/select-city/select-city.tsx","assets/img/placeholder.svg","components/placeholder/placeholder.tsx","components/weather-cards/seven-days-weather-card/seven-days-weather-card.tsx","assets/img/icons/arrow-left.svg","assets/img/icons/arrow-right.svg","components/forecast/seven-days-forecast/seven-days-forecast.tsx","components/selectors/select-date/select-date.tsx","components/weather-cards/historic-weather-card/historic-weather-card.tsx","components/forecast/historic-forecast/historic-forecast.tsx","components/app/app.tsx","reportWebVitals.ts","index.tsx"],"names":["WeatherService","_apiKey","_baseURL","getWeatherForSevenDays","lat","lon","a","urlToFetch","fetch","response","ok","Error","status","json","dataArrays","daily","array","forEach","day","symbolOfWeather","temp","properties","id","Math","random","icon","weather","find","el","date","Date","dt","toLocaleString","year","month","split","join","temperature","round","toString","push","getWeatherForHistoricDate","historicDay","current","console","error","Title","className","SelectCity","cities","onChangeHandler","blockNum","useState","isActive","setIsActive","styleClass","onFocus","onBlur","onChange","event","target","value","blur","hidden","map","city","name","Placeholder","src","placeholder","alt","SevenDaysWeatherCard","SevenDaysForecast","data","showSevenDaysForecast","onPrevHandler","onNextHandler","showAllWeatherCards","LeftArrowBlock","onClick","arrowLeft","RightArrowBlock","arrowRight","leftArrow","rightArrow","Weather","obj","SelectDate","onChangeDateHandler","isFocused","setIsFocused","minDays","now","oneDay","toISOString","slice","maxDays","onFocusChange","opacityStyle","type","style","opacity","min","max","parse","onInput","HistoricWeatherCard","image","text","HistoricForecast","showHistoricForecast","historicData","weatherOrPlaceholder","App","width","React","window","innerWidth","setWidth","useEffect","addEventListener","updateWidth","removeEventListener","useWindowDimensions","location","setLocation","setDate","setData","setHistoricData","setShowSevenDaysForecast","setShowHistoricForecast","setShowAllWeatherCards","toggleWeather","setToggleWeather","first","second","then","res","result","locationHandler","coords","newObject","prevState","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9a7ba0d6.chunk.js","sourcesContent":["type WeatherType = {\r\n   id: number,\r\n   icon: string,\r\n   date: string,\r\n   temperature: string\r\n}\r\n\r\nexport default class WeatherService {\r\n   _apiKey: string = '9f794cbee16169a67f1379107a9a4b6e';\r\n   _baseURL: string = 'https://api.openweathermap.org/data/2.5/onecall';\r\n\r\n   getWeatherForSevenDays = async (lat: number, lon: number): Promise<WeatherType[]> => {\r\n      const urlToFetch: string = `${this._baseURL}?lat=${lat}&lon=${lon}&&exclude=current,minutely,hourly,alerts&appid=${\r\n         this._apiKey\r\n      }`;\r\n      const response = await fetch(urlToFetch);\r\n\r\n      if (!response.ok) {\r\n         throw new Error(`Could not fetch ${urlToFetch}, received ${response.status}`)\r\n      }\r\n\r\n      const json = await response.json();\r\n      const dataArrays = json.daily;\r\n\r\n      let array: WeatherType[] = [];\r\n\r\n      await dataArrays.forEach((day: { weather: [{ icon: string }]; dt: number; temp: { day: number; }; }) => {\r\n         const symbolOfWeather: string = (day.temp.day - 273.15) >= 0 ? '+' : '-';\r\n         const properties = {\r\n            id: Math.random(),\r\n            icon: `https://openweathermap.org/img/wn/${day.weather.find(el => el.icon)?.icon}@2x.png`,\r\n            date: new Date(day.dt * 1000)\r\n               .toLocaleString(\"en\", {year: 'numeric', month: 'short', day: \"numeric\"})\r\n               .split(', ')\r\n               .join(' '),\r\n            temperature: symbolOfWeather + Math.round(day.temp.day - 273.15).toString() + '°'\r\n         }\r\n         array.push(properties);\r\n      })\r\n\r\n      return array;\r\n   }\r\n\r\n   getWeatherForHistoricDate = async (lat: number, lon: number, date: number) => {\r\n      const urlToFetch: string = `${this._baseURL}/timemachine?lat=${lat}&lon=${lon}&dt=${date}&appid=${this._apiKey}`;\r\n      try {\r\n         const response = await fetch(urlToFetch);\r\n         const json = await response.json();\r\n         const historicDay = json.current;\r\n         const symbolOfWeather: string = (historicDay.temp - 273.15) >= 0 ? '+' : '-';\r\n\r\n         return {\r\n            icon: `https://openweathermap.org/img/wn/${historicDay.weather[0].icon}@2x.png`,\r\n            date: new Date(historicDay.dt * 1000).toLocaleString(\"en\",\r\n               {year: 'numeric', month: 'short', day: \"numeric\"}).split(', ').join(' '),\r\n            temperature: `${symbolOfWeather}${Math.round(historicDay.temp - 273.15).toString()}°`\r\n         };\r\n      } catch (error) {\r\n         console.error(error);\r\n         return {\r\n            icon: '',\r\n            date: '',\r\n            temperature: ''\r\n         }\r\n      }\r\n   }\r\n}","import React from 'react';\r\n\r\nconst Title: React.FC = () => {\r\n   return (\r\n      <div className='title'>\r\n         <div className='title__item title__item-1'>Weather</div>\r\n         <div className='title__item title__item-2'>forecast</div>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default Title;","import React, {useState} from 'react';\r\nimport {CityType} from \"../../app/app\";\r\n\r\nexport type SelectCitiesTypeProps = {\r\n   cities: CityType[],\r\n   onChangeHandler: (coords: string, blockNum: number) => void,\r\n   blockNum: number\r\n}\r\n\r\nconst SelectCity: React.FC<SelectCitiesTypeProps> = ({cities, onChangeHandler, blockNum}) => {\r\n   const [isActive, setIsActive] = useState<boolean>(false);\r\n\r\n   const changeHandler = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n      onChangeHandler(event.target.value, blockNum);\r\n      event.target.blur();\r\n   };\r\n   const focusHandler = (): void => {\r\n      setIsActive(true);\r\n   };\r\n   const unFocusHandler = (): void => {\r\n      setIsActive(false);\r\n   };\r\n\r\n   let styleClass: string = 'select-city__wrapper';\r\n   if (isActive) {\r\n      styleClass += ' active';\r\n   } else {\r\n      styleClass = 'select-city__wrapper';\r\n   }\r\n\r\n\r\n   return (\r\n      <div className={styleClass}>\r\n         <select className='select select-city'\r\n                 onFocus={focusHandler}\r\n                 onBlur={unFocusHandler}\r\n                 onChange={changeHandler}>\r\n            <option hidden>Select city</option>\r\n            {cities.map(city => <option key={city.lat}\r\n                                        value={`${city.lat}, ${city.lon}`}>{city.name}</option>\r\n            )}\r\n         </select>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default SelectCity;\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/placeholder.59a85e9a.svg\";","import React from 'react';\r\nimport placeholder from '../../assets/img/placeholder.svg';\r\n\r\nconst Placeholder: React.FC = () => {\r\n   return (\r\n      <div className='placeholder'>\r\n         <img className='placeholder__image' src={placeholder} alt=\"cloud\"/>\r\n         <p className='placeholder__text'>Fill in all the fields and the weather will be displayed</p>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default Placeholder;","import React from \"react\";\r\n\r\nexport type WeatherTypeProps = {\r\n   date: string,\r\n   icon: string,\r\n   temperature: string\r\n}\r\n\r\nconst SevenDaysWeatherCard: React.FC<WeatherTypeProps> = ({date, icon, temperature}) => {\r\n   return (\r\n      <div className='weather-card'>\r\n         <div className=\"weather-card__flex\">\r\n            <div className=\"weather-card__date\">{date}</div>\r\n            <img className='weather-card__image' src={icon} alt=\"\"/>\r\n            <div className=\"weather-card__temp\">{temperature}</div>\r\n         </div>\r\n      </div>\r\n   )\r\n};\r\n\r\nexport default SevenDaysWeatherCard;","export default __webpack_public_path__ + \"static/media/arrow-left.c57d52d4.svg\";","export default __webpack_public_path__ + \"static/media/arrow-right.e6596943.svg\";","import React from 'react';\r\nimport {CityType, DataType} from \"../../app/app\";\r\nimport SelectCity from '../../selectors/select-city/select-city';\r\nimport Placeholder from \"../../placeholder/placeholder\";\r\nimport WeatherCard from \"../../weather-cards/seven-days-weather-card/seven-days-weather-card\";\r\nimport arrowLeft from '../../../assets/img/icons/arrow-left.svg';\r\nimport arrowRight from '../../../assets/img/icons/arrow-right.svg';\r\n\r\ntype WeatherTypeProps = {\r\n   cities: CityType[],\r\n   onChangeHandler: (coords: string, blockNum: number) => void,\r\n   showSevenDaysForecast: boolean,\r\n   data: DataType[],\r\n   onPrevHandler: () => void,\r\n   onNextHandler: () => void,\r\n   showAllWeatherCards: boolean\r\n}\r\n\r\nconst SevenDaysForecast: React.FC<WeatherTypeProps> = ({\r\n                                                         data,\r\n                                                         showSevenDaysForecast,\r\n                                                         cities,\r\n                                                         onChangeHandler,\r\n                                                         onPrevHandler,\r\n                                                         onNextHandler,\r\n                                                         showAllWeatherCards\r\n                                                      }) => {\r\n   const blockNum = 0;\r\n\r\n   const LeftArrowBlock = () => {\r\n      return (\r\n         <div onClick={onPrevHandler}\r\n              className=\"weather__arrow-left\">\r\n            <img src={arrowLeft} alt=\"arrow-left\"/>\r\n         </div>\r\n      );\r\n   };\r\n   const RightArrowBlock = () => {\r\n      return (\r\n         <div onClick={onNextHandler}\r\n              className=\"weather__arrow-right\">\r\n            <img src={arrowRight} alt=\"arrow-right\"/>\r\n         </div>\r\n      );\r\n   };\r\n\r\n   const leftArrow = showAllWeatherCards ? null : <LeftArrowBlock/>;\r\n   const rightArrow = showAllWeatherCards ? null : <RightArrowBlock/>;\r\n\r\n   const Weather = () => {\r\n      return (\r\n         <div className='weather'>\r\n            {leftArrow}\r\n            {\r\n               data.map((obj: DataType) => {\r\n                  return <WeatherCard key={obj.id}\r\n                                      date={obj.date}\r\n                                      icon={obj.icon}\r\n                                      temperature={obj.temperature}/>\r\n               })\r\n            }\r\n            {rightArrow}\r\n         </div>\r\n      )\r\n   }\r\n\r\n   const weather = showSevenDaysForecast\r\n      ? <Weather/>\r\n      : <Placeholder/>;\r\n\r\n   return (\r\n      <section className='card'>\r\n         <div className='card__content'>\r\n            <div className='card__content-header'>\r\n               <h2 className='card__content-title'>7 Days Forecast</h2>\r\n               <SelectCity onChangeHandler={onChangeHandler}\r\n                           cities={cities}\r\n                           blockNum={blockNum}/>\r\n            </div>\r\n            <div>\r\n               {weather}\r\n            </div>\r\n         </div>\r\n      </section>\r\n   )\r\n}\r\n\r\nexport default SevenDaysForecast;","import React, {useState} from 'react';\r\n\r\ntype SelectDatePropsType = {\r\n   onChangeDateHandler: (date: number) => void\r\n}\r\n\r\nconst SelectDate: React.FC<SelectDatePropsType> = ({onChangeDateHandler}) => {\r\n   const [isFocused, setIsFocused] = useState<boolean>(false);\r\n\r\n   const oneDay = 86400000;\r\n   const minDays = new Date(Date.now() - oneDay * 5).toISOString().slice(0, 10);\r\n   const maxDays = new Date().toISOString().slice(0, 10);\r\n\r\n   const onDateChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n      const date = Date.parse(event.target.value) / 1000;\r\n      onChangeDateHandler(date);\r\n   };\r\n\r\n   const onFocusChange = () => {\r\n      setIsFocused(true);\r\n   };\r\n\r\n   const onBlurChange = () => {\r\n      setIsFocused(false);\r\n   };\r\n\r\n   const opacityStyle = isFocused ? 0 : 1;\r\n\r\n   return (\r\n      <div className='select-date__wrapper'>\r\n         <input type=\"text\"\r\n                className='select select-date__placeholder'\r\n                placeholder=\"Select date\"\r\n                style={{opacity: opacityStyle}}/>\r\n         <input className='select select-date'\r\n                type=\"date\"\r\n                min={minDays}\r\n                max={maxDays}\r\n                onChange={onDateChange}\r\n                onFocus={onFocusChange}\r\n                onBlur={onBlurChange}\r\n                onInput={onFocusChange}/>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default SelectDate;","import React from \"react\";\r\nimport {WeatherTypeProps} from \"../seven-days-weather-card/seven-days-weather-card\";\r\n\r\nconst HistoricWeatherCard: React.FC<WeatherTypeProps> = ({date, icon, temperature}) => {\r\n   const image = icon ? <img className='historic-weather-card__image' src={icon} alt=\"\"/> : null;\r\n   const text = date\r\n      ? <div className=\"historic-weather-card__date\">{date}</div>\r\n      : <div className=\"error-text\">Please enter last 5 days or choose from calendar</div>\r\n\r\n   return (\r\n      <div className='historic-weather-card'>\r\n         <div className=\"historic-weather-card__flex\">\r\n            {text}\r\n            {image}\r\n            <div className=\"historic-weather-card__temp\">{temperature}</div>\r\n         </div>\r\n      </div>\r\n   )\r\n};\r\n\r\nexport default HistoricWeatherCard;","import React from 'react';\r\nimport Placeholder from \"../../placeholder/placeholder\";\r\nimport SelectDate from \"../../selectors/select-date/select-date\";\r\nimport HistoricWeatherCard from \"../../weather-cards/historic-weather-card/historic-weather-card\";\r\nimport SelectCity from \"../../selectors/select-city/select-city\";\r\nimport {CityType, DataType} from \"../../app/app\";\r\n\r\ntype HistoricWeatherTypeProps = {\r\n   cities: CityType[],\r\n   showHistoricForecast: boolean,\r\n   onChangeHandler: (coords: string, blockNum: number) => void,\r\n   onChangeDateHandler: (date: number) => void,\r\n   historicData: DataType\r\n}\r\n\r\nconst HistoricForecast: React.FC<HistoricWeatherTypeProps> = ({\r\n                                                                 cities,\r\n                                                                 showHistoricForecast,\r\n                                                                 onChangeHandler,\r\n                                                                 onChangeDateHandler,\r\n                                                                 historicData\r\n                                                              }) => {\r\n   const blockNum = 1;\r\n\r\n   const weatherOrPlaceholder = showHistoricForecast\r\n      ? <HistoricWeatherCard date={historicData.date}\r\n                             icon={historicData.icon}\r\n                             temperature={historicData.temperature}/>\r\n      : <Placeholder/>;\r\n\r\n   return (\r\n      <section className='card'>\r\n         <div className='card__content'>\r\n            <div className='card__content-header'>\r\n               <h2 className='card__content-title'>Forecast for a Date in the Past</h2>\r\n               <div className=\"card__select\">\r\n                  <SelectCity cities={cities}\r\n                              onChangeHandler={onChangeHandler}\r\n                              blockNum={blockNum}/>\r\n                  <SelectDate onChangeDateHandler={onChangeDateHandler}/>\r\n               </div>\r\n            </div>\r\n            <div>\r\n               {weatherOrPlaceholder}\r\n            </div>\r\n         </div>\r\n      </section>\r\n   );\r\n};\r\n\r\nexport default HistoricForecast;","import React, {useEffect, useState} from 'react';\r\nimport WeatherService from \"../../api/api\";\r\nimport Title from '../title/title';\r\nimport SevenDaysForecast from '../forecast/seven-days-forecast/seven-days-forecast';\r\nimport HistoricForecast from \"../forecast/historic-forecast/historic-forecast\";\r\nimport './app.scss';\r\n\r\nexport type CityType = {\r\n   name: string,\r\n   lat: number,\r\n   lon: number\r\n}\r\n\r\nexport type DataType = {\r\n   id?: number,\r\n   date: string,\r\n   icon: string,\r\n   temperature: string\r\n}\r\n\r\ntype LocationType = {\r\n   lat: number | null,\r\n   lon: number | null,\r\n}\r\n\r\nfunction useWindowDimensions() {\r\n   const [width, setWidth] = React.useState<number>(window.innerWidth);\r\n   useEffect(() => {\r\n      window.addEventListener(\"resize\", updateWidth);\r\n      return () => window.removeEventListener(\"resize\", updateWidth);\r\n   });\r\n\r\n   const updateWidth = () => {\r\n      setWidth(window.innerWidth);\r\n   };\r\n   return width;\r\n}\r\n\r\nconst App: React.FC = () => {\r\n   const width = useWindowDimensions();\r\n   const citiesArray = [\r\n      {name: 'Самара', lat: 53.195873, lon: 50.100193},\r\n      {name: 'Тольятти', lat: 53.507836, lon: 49.420393},\r\n      {name: 'Саратов', lat: 51.533557, lon: 46.034257},\r\n      {name: 'Казань', lat: 55.796127, lon: 49.106405},\r\n      {name: 'Краснодар', lat: 45.035470, lon: 38.975313}\r\n   ];\r\n\r\n   const [cities] = useState<CityType[]>(citiesArray);\r\n   const [location, setLocation] = useState<LocationType[]>([{lat: null, lon: null}, {lat: null, lon: null}]);\r\n   const [date, setDate] = useState<number | null>(null);\r\n   const [data, setData] = useState<DataType[]>([]);\r\n   const [historicData, setHistoricData] = useState<DataType>({date: '', icon: '', temperature: ''});\r\n   const [showSevenDaysForecast, setShowSevenDaysForecast] = useState<boolean>(false);\r\n   const [showHistoricForecast, setShowHistoricForecast] = useState<boolean>(false);\r\n   const [showAllWeatherCards, setShowAllWeatherCards] = useState<boolean>(false);\r\n   const [toggleWeather, setToggleWeather] = useState<number>(0);\r\n\r\n   const [first, second] = location;\r\n\r\n   useEffect(() => {\r\n      const lat = first.lat;\r\n      const lon = first.lon;\r\n\r\n      if (lat && lon) {\r\n         const weather = new WeatherService();\r\n\r\n         weather.getWeatherForSevenDays(lat, lon)\r\n            .then(res => {\r\n               setData([]);\r\n               return res;\r\n            })\r\n            .then(res => {\r\n               if (showAllWeatherCards) {\r\n                  return res;\r\n               } else {\r\n                  return res.slice(toggleWeather, 3 + toggleWeather);\r\n               }\r\n            })\r\n            .then(res => {\r\n               setData(res);\r\n               setShowSevenDaysForecast(true);\r\n            });\r\n      }\r\n   }, [first, toggleWeather, showAllWeatherCards])\r\n\r\n   useEffect(() => {\r\n      const lat = second.lat;\r\n      const lon = second.lon;\r\n\r\n      if (lat && lon && date) {\r\n         const weather = new WeatherService();\r\n         weather.getWeatherForHistoricDate(lat, lon, date)\r\n            .then(result => {\r\n               setHistoricData(result);\r\n               setShowHistoricForecast(true);\r\n            })\r\n      }\r\n   }, [second, date])\r\n\r\n   useEffect(() => {\r\n      if (width <= 660) {\r\n         setShowAllWeatherCards(true);\r\n      } else {\r\n         setShowAllWeatherCards(false);\r\n      }\r\n   }, [width])\r\n\r\n   const locationHandler = (coords: string, blockNum: number) => {\r\n      const [latitude, longitude] = coords.split(', ');\r\n      const newObject = {\r\n         lat: +latitude,\r\n         lon: +longitude\r\n      };\r\n\r\n      setLocation(prevState => prevState.map(el => {\r\n         if (el === prevState[blockNum]) {\r\n            return newObject\r\n         }\r\n         return el;\r\n      }));\r\n   };\r\n\r\n   const dateHandler = (date: number) => {\r\n      setDate(date);\r\n   };\r\n\r\n   const toggleNextHandler = () => {\r\n      if (0 <= toggleWeather && toggleWeather < 5) {\r\n         setToggleWeather(prevState => ++prevState);\r\n      }\r\n   };\r\n\r\n   const togglePrevHandler = () => {\r\n      if (0 < toggleWeather && toggleWeather <= 5) {\r\n         setToggleWeather(prevState => --prevState);\r\n      }\r\n   };\r\n\r\n   return (\r\n      <div className='app'>\r\n         <div className='_container'>\r\n            <header className='app__title'>\r\n               <Title/>\r\n            </header>\r\n            <main className='app__blocks'>\r\n               <SevenDaysForecast cities={cities}\r\n                                  onChangeHandler={locationHandler}\r\n                                  onPrevHandler={togglePrevHandler}\r\n                                  onNextHandler={toggleNextHandler}\r\n                                  showSevenDaysForecast={showSevenDaysForecast}\r\n                                  data={data}\r\n                                  showAllWeatherCards={showAllWeatherCards}/>\r\n               <HistoricForecast cities={cities}\r\n                                 showHistoricForecast={showHistoricForecast}\r\n                                 onChangeHandler={locationHandler}\r\n                                 onChangeDateHandler={dateHandler}\r\n                                 historicData={historicData}/>\r\n            </main>\r\n         </div>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default App;","import {ReportHandler} from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n   if (onPerfEntry && onPerfEntry instanceof Function) {\r\n      import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\r\n         getCLS(onPerfEntry);\r\n         getFID(onPerfEntry);\r\n         getFCP(onPerfEntry);\r\n         getLCP(onPerfEntry);\r\n         getTTFB(onPerfEntry);\r\n      });\r\n   }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/app/app';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n   <React.StrictMode>\r\n      <App/>\r\n   </React.StrictMode>,\r\n   document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}